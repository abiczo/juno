
** Juno Model API
=================

    Juno's model API is a little different than most other frameworks as 
    you don't use Python's class keyword, but instead simply call Juno's
    model function.  A simple example:
        
        Person = juno.model('Person', name='string')
    
    Person is now a class that you can use to construct objects, just as if
    you had used `class Person:`.  The `name='string'` portion creates an
    instance variable called `name` and maps it to a SQLAlchemy column of 
    type String.

    To instantiate a Person object, you must use keyword arguments:
        
        brian = Person(name='brian')
    
    `brian` now has a `name` variable and an `id` variable (its database 
    primary key).  It also has the following methods:

        brian.add()         # Adds the object to the current session, but
                            # doesn't commit it.
        brian.commit()      # Adds and commits the object.
        brian.__repr__()    # Defaults to '<Person: id = X>'
    

    * Adding Other Database Columns
    -------------------------------

    Currently only SQLAlchemy's String and Integer columns are supported.

    To use Integer instead of the above String, use 'integer' or 'int' instead
    of 'string'.


    * Adding Custom Functions
    -------------------------

    You can add custom functions to your model in the model(...) call.  For
    example, to add your own __repr__, use something like the following:
        
        Person = juno.model('Person', name='string',
            __repr__=lambda self: '<Person: %s>' %self.name)

    You could also define the function beforehand if you needed more than one
    statement, or don't like lambdas:
        
        def my_repr(self): return '<Person: %s>' %self.name

        Person = juno.model('Person', name='string', __repr__=my_repr)

    
    * Querying for Objects
    ----------------------
    
    Juno doesn't have its own query language, and instead just gives you access
    to SQLAlchemy's query system.  To use it, use the find function and then 
    attach whatever SQLAlchemy methods you need:

        people = juno.find(Person).all()


    * Other Notes
    -------------

    If you need to use the current session directly, use the session() function,
    which returns the SQLAlchemy session object:
        
        session().add_all([Person(...), Person(...), ...])


    * Creating a Database Connection
    --------------------------------

    Juno's default database engine is an in-memory SQLite database.  To specify
    something different, use the 'db_type' and 'db_location' settings by calling
    init() after importing Juno:
        
        juno.init({'db_type': 'mysql', 'db_location': 'localhost/foo'})

    The database type can be any of the drivers that SQLAlchemy supports, and
    the location is the part of the engine URL after the 'driver://' part.
    See http://www.sqlalchemy.org/docs/05/dbengine.html#create-engine-url-arguments
    for details.


